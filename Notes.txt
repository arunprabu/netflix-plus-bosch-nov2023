Webapps 
----
  1. Server Side Rendering Apps (SSR) / Traditional Webapps 
      * pages will refresh 

      Codebase 
      ----
        Front End (HTML, CSS, JS) + Back End (Java/PHP/etc) + DB Queries 

      Deployment 
      ----
        1 Server -- port 8080 
        
        http://localhost:8080

      Response: 
      ------
        HTML, CSS, JS + Data 

      Disadv 
      ----
        1. Slower Apps 
        2. One server has to do the heavy-lifting 
        3. UX was bad 
        4. bandwidth consumption was more 
        5. expensive

  2. Client Side Rendering Apps (CSR) / Modern Webapps = SPA + REST API 
      * Pages will NOT Refresh 

      Codebase 
      ----
        Front End App:  HTML, CSS, JS
        Back End App: Java/PHP/.... + DB Queries 

      Deployment 
      -----
        2 Servers 
          1 For Front End App a.k.a Single Page App (SPA)  -- port 3000
          Response: HTML, CSS, JS 

          1 For Back End App a.k.a RESTful API (Rest API)  -- port 8080
          Response: Data (JSON) 

      Advantages 
      ----
        1. Faster Apps 
        2. Two servers are sharing the workload
        3. UX has become good
        4. bandwidth consumption was less 
        5. less expensive


--------
Single Page Apps (SPA)
----
  Characteristics of SPA
    1. Page should NOT Refresh [DONE]
    2. URL should change [DONE]
    3. History should be maintained w/o page refresh [DONE]
    4. Header and Footer should not be loaded again and again [DONE]
    5. In Between Header and Footer -- show the contextual updates [DONE]
    6. Active Menu should be set [TODO]
    7. Page Title should be changed [TODO]

  Frameworks / Libraries
  ---------
    #1. React JS (library)
    #2. Angular 2+ (framework)
    #3. Vue JS (framework)
=================

Create a TS based Project?
  npx create-react-app netflix-plus-bosch-nov2023 --template typescript

=====
Component
-----------
  Thinking in React 
    Step 0: Identify the number of components 
    Step 1: Break the UI into a component hierarchy 

  Types of Components 
  ------
    1. Functional Components
        * were called as Stateless Components. But no longer.
        * were called as Presentational components / Dumb Components.  But no longer

        1.1. Functional Components with Named Fn [DONE]
        1.2. Functional Components with Anonymous Fn [DONE]
        1.3. Functional Components with Arrow Fn [DONE] (RECOMMENDED)

    2. Class Components (About to be Deprecated in v19 or v20)
        * were called as Stateful Components. But no longer.
        * were called as Containers components / Smart Components.  But no longer


Project Structure
-----------------
  src/
    components/
      MenuList.tsx
    layouts/
      Header.tsx 
      Footer.tsx 
    pages/

    
    
    
    

Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in TypeScript 
        * Recommended for React Components and the folder of Components

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html elements 
        * Recommended for variables, const, fn, methods, event handlers of React Component
        
        examples 
        -----
          var myCar = 'BMW';
          var isLoggedIn = true;

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names, assets in front end projects  
        * Recommended for css classes 
        * okay for id's of html elements if your architect says ok

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case 
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;

----------------


Core Concepts in React JS 
-----------------------
  1. Props [DONE]
  2. States [DONE]
  3. Events [DONE]
  4. Lists & Keys [DONE]
  5. Conditional Rendering [DONE]
  6. Styling [DONE]

Limitations of ReactJS 
-----
  1. Doesn't have tools to help make SPA. Use react-router-dom 
  2. Doesn't have any tool to help connect to REST API. use axios or else fetch (native js) 
  3. Doesn't offer any form and form validation related tools
  4. Most of the other things you need to look for open source tools


Developing SPA in React JS 
============
  Step 0: Identifying the URLs for Menus and matching components 
    Home              - /            -- Home Component 
    Netflix App       - /netflix     -- Netflix Component 
    User Management   - /users       -- Users Component 
    Timeline          - /timeline    -- Timeline Component 
    Products          - /products    -- Products Component 
    Tree View         - /tree-view   -- TreeView Component 
    About             - /about       -- About Component 
    Contact Us        - /contact-us  -- ContactUs Component 
    Spotify App       - /spotify     -- Spotify Component (You can find steps in E-Book)

  Step 1: Let's setup the URLs in MenuList component 
  
  Step 2: Let's create the necessary components

  Step 3: Let's integrate react-router-dom in our React App to implement routing
          npm i react-router-dom 

  Step 4: Let's move the entire app under BrowserRouter in App.tsx 
          Now, Let's setup the routing configuration in App.tsx

  Step 5: Check the app. Page will still refresh. Let's fix it. 
          In MenuList.tsx, replace a href with <Link to=''> from react-router-dom 

  
=========

Working with variables in React
----
  Refer: Footer.tsx 

Cross Component Communication
----------------------------
  1. Parent to Child Component Communication [DONE]
      Using Props 

  2. Child to Parent Component Communication [TODO]
      Using Props, Event Handler fn passed to child component

  3. Any to Any Component Communication 
      3.1 Using React Context API [DONE]
      3.2 Using Redux / Redux-Toolkit / Flex / MobX / Zustand / Recoil / Jotai

=====
Internationalization (i18n)
  * Making sure the app showing its content in multiple languages

Localization (l10n)
  * Ensuring your apps content is showing for specific regiion (locale-specific)

npm i i18next react-i18next i18next-browser-languagedetector




Saturday
---

  i18n & l10n (till 1pm)

  Case study #4 -- by 2 to 4 pm (Authentication)

  Case Study #5 -- tree view (4 to 4.45.pm)
  Error Boundary (5.00pm)
  HOC (5 to 5.45pm)
  
Sunday
---
  Uncontrolled Components
  TodoApp with useReducer
  case study #6: timeline 
  Hooks (useMemo, useCallback)
  build and deployment 
  lazy loading 

  Redux - Toolkit (2 to 5.45pm)
 